import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // Users table for storing user profiles and study statistics
  users: defineTable({
    clerkId: v.string(),
    email: v.string(),
    name: v.string(),
    avatar: v.optional(v.string()),
    studyStreak: v.number(),
    totalStudyTime: v.number(), // in minutes
    level: v.number(),
    xp: v.number(),
    subscription: v.optional(v.union(
      v.literal("free"),
      v.literal("premium"),
      v.literal("pro")
    )),
    createdAt: v.number(),
    lastActiveAt: v.number(),
  })
    .index("by_clerk_id", ["clerkId"])
    .index("by_email", ["email"])
    .index("by_level", ["level"])
    .index("by_study_streak", ["studyStreak"]),

  // Documents table for storing uploaded study materials
  documents: defineTable({
    userId: v.id("users"),
    title: v.string(),
    fileName: v.string(),
    fileSize: v.number(),
    fileType: v.string(),
    storageId: v.optional(v.id("_storage")), // Convex file storage
    uploadedAt: v.number(),
    lastReadAt: v.optional(v.number()),
    readingProgress: v.number(), // percentage 0-100
    tags: v.array(v.string()),
    subject: v.optional(v.string()),
    isPublic: v.boolean(),
    totalPages: v.optional(v.number()),
    extractedText: v.optional(v.string()), // For AI processing
  })
    .index("by_user", ["userId"])
    .index("by_subject", ["subject"])
    .index("by_upload_date", ["uploadedAt"])
    .index("by_public", ["isPublic"]),

  // Study Sessions for tracking Pomodoro sessions
  studySessions: defineTable({
    userId: v.id("users"),
    documentId: v.optional(v.id("documents")),
    studyRoomId: v.optional(v.id("studyRooms")),
    startTime: v.number(),
    endTime: v.optional(v.number()),
    duration: v.optional(v.number()), // in minutes
    pomodoroCount: v.number(),
    quizScore: v.optional(v.number()),
    notes: v.optional(v.string()),
    isCompleted: v.boolean(),
    sessionType: v.union(
      v.literal("solo"),
      v.literal("group")
    ),
    focusRating: v.optional(v.number()), // 1-5 rating
  })
    .index("by_user", ["userId"])
    .index("by_document", ["documentId"])
    .index("by_study_room", ["studyRoomId"])
    .index("by_start_time", ["startTime"])
    .index("by_completion", ["isCompleted"]),

  // Study Rooms for collaborative studying
  studyRooms: defineTable({
    name: v.string(),
    description: v.string(),
    createdBy: v.id("users"),
    currentDocument: v.optional(v.id("documents")),
    isActive: v.boolean(),
    isPublic: v.boolean(),
    maxParticipants: v.number(),
    currentParticipants: v.number(),
    subject: v.optional(v.string()),
    createdAt: v.number(),
    lastActivityAt: v.number(),
    settings: v.object({
      allowChat: v.boolean(),
      pomodoroSync: v.boolean(),
      requireApproval: v.boolean(),
    }),
  })
    .index("by_creator", ["createdBy"])
    .index("by_active", ["isActive"])
    .index("by_public", ["isPublic"])
    .index("by_subject", ["subject"])
    .index("by_activity", ["lastActivityAt"]),

  // Room Participants for tracking who's in each study room
  roomParticipants: defineTable({
    roomId: v.id("studyRooms"),
    userId: v.id("users"),
    joinedAt: v.number(),
    lastSeenAt: v.number(),
    status: v.union(
      v.literal("active"),
      v.literal("idle"),
      v.literal("away")
    ),
    role: v.union(
      v.literal("owner"),
      v.literal("moderator"),
      v.literal("participant")
    ),
  })
    .index("by_room", ["roomId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_room_and_user", ["roomId", "userId"]),

  // Quizzes generated by AI for comprehension checks
  quizzes: defineTable({
    sessionId: v.id("studySessions"),
    documentId: v.id("documents"),
    userId: v.id("users"),
    questions: v.array(v.object({
      id: v.string(),
      question: v.string(),
      options: v.array(v.string()),
      correctAnswer: v.number(),
      explanation: v.string(),
      userAnswer: v.optional(v.number()),
      timeSpent: v.optional(v.number()), // seconds
    })),
    score: v.optional(v.number()),
    completedAt: v.optional(v.number()),
    totalTimeSpent: v.number(), // seconds
    difficulty: v.union(
      v.literal("easy"),
      v.literal("medium"),
      v.literal("hard")
    ),
    generatedFrom: v.string(), // text excerpt used to generate quiz
  })
    .index("by_session", ["sessionId"])
    .index("by_document", ["documentId"])
    .index("by_user", ["userId"])
    .index("by_completion", ["completedAt"]),

  // AI Interactions for tracking AI tutor conversations
  aiInteractions: defineTable({
    userId: v.id("users"),
    sessionId: v.optional(v.id("studySessions")),
    documentId: v.optional(v.id("documents")),
    selectedText: v.string(),
    userQuery: v.optional(v.string()),
    aiResponse: v.string(),
    interactionType: v.union(
      v.literal("explanation"),
      v.literal("question"),
      v.literal("summary"),
      v.literal("quiz_help")
    ),
    timestamp: v.number(),
    rating: v.optional(v.number()), // 1-5 user rating
    followUpActions: v.optional(v.array(v.string())),
  })
    .index("by_user", ["userId"])
    .index("by_session", ["sessionId"])
    .index("by_document", ["documentId"])
    .index("by_timestamp", ["timestamp"])
    .index("by_type", ["interactionType"]),

  // Leaderboards for gamification
  leaderboards: defineTable({
    userId: v.id("users"),
    period: v.union(
      v.literal("daily"),
      v.literal("weekly"),
      v.literal("monthly"),
      v.literal("all_time")
    ),
    metric: v.union(
      v.literal("study_time"),
      v.literal("quiz_score"),
      v.literal("streak"),
      v.literal("documents_read")
    ),
    value: v.number(),
    rank: v.number(),
    updatedAt: v.number(),
  })
    .index("by_period_and_metric", ["period", "metric"])
    .index("by_user_and_period", ["userId", "period"])
    .index("by_rank", ["rank"])
    .index("by_updated", ["updatedAt"]),

  // Notifications for user engagement
  notifications: defineTable({
    userId: v.id("users"),
    type: v.union(
      v.literal("study_reminder"),
      v.literal("quiz_available"),
      v.literal("room_invitation"),
      v.literal("achievement"),
      v.literal("streak_milestone")
    ),
    title: v.string(),
    message: v.string(),
    isRead: v.boolean(),
    createdAt: v.number(),
    actionUrl: v.optional(v.string()),
    metadata: v.optional(v.any()),
  })
    .index("by_user", ["userId"])
    .index("by_read_status", ["isRead"])
    .index("by_type", ["type"])
    .index("by_created", ["createdAt"]),
});